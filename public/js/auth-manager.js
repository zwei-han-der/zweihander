const AuthManager = {
    // Fazer login
    async login(email, password) {
        try {
            // Validar inputs
            if (!email || !password) {
                throw new Error('Email e senha s√£o obrigat√≥rios');
            }

            if (!this.isValidEmail(email)) {
                throw new Error('Email inv√°lido');
            }

            let result;

            if (supabase) {
                // Login com Supabase
                result = await supabase.signIn(email, password);
                
                if (result.error) {
                    throw new Error(result.error);
                }

                // Atualizar estado
                AppState.setAuthenticated(true, result.user);
                
            } else {
                // Login mock para demonstra√ß√£o
                if (email === CONFIG.DEMO_AUTH.EMAIL && password === CONFIG.DEMO_AUTH.PASSWORD) {
                    const mockUser = {
                        id: 'demo-user',
                        email: email,
                        name: 'Admin Demo'
                    };
                    
                    AppState.setAuthenticated(true, mockUser);
                    result = { user: mockUser };
                } else {
                    throw new Error('Credenciais inv√°lidas');
                }
            }

            // Log da a√ß√£o
            console.log('‚úÖ Login realizado com sucesso:', result.user?.email);

            return { success: true, user: result.user };

        } catch (error) {
            console.error('‚ùå Erro no login:', error);
            return { success: false, error: error.message };
        }
    },

    // Fazer logout
    async logout() {
        try {
            if (supabase && supabase.isAuthenticated()) {
                await supabase.signOut();
            }

            // Limpar estado
            AppState.setAuthenticated(false, null);
            
            // Log da a√ß√£o
            console.log('‚úÖ Logout realizado com sucesso');
            
            return { success: true };

        } catch (error) {
            console.error('‚ùå Erro no logout:', error);
            
            // Mesmo com erro, limpar estado local
            AppState.setAuthenticated(false, null);
            return { success: true, error: error.message };
        }
    },

    // Verificar autentica√ß√£o armazenada
    async checkStoredAuth() {
        try {
            if (!supabase) {
                return { success: false, error: 'Supabase n√£o configurado' };
            }

            // Verificar se h√° token armazenado
            if (supabase.isAuthenticated()) {
                // Tentar validar o token fazendo uma requisi√ß√£o simples
                try {
                    const { data, error } = await supabase
                        .from('posts')
                        .select('id')
                        .limit(1);

                    if (!error) {
                        // Token v√°lido, manter autentica√ß√£o
                        const storedUser = {
                            email: 'stored-user',
                            id: 'stored-user-id'
                        };
                        
                        AppState.setAuthenticated(true, storedUser);
                        console.log('‚úÖ Autentica√ß√£o restaurada do armazenamento');
                        return { success: true, authenticated: true };
                    }
                } catch (tokenError) {
                    console.warn('‚ö†Ô∏è Token inv√°lido, fazendo logout:', tokenError);
                    // Token inv√°lido, fazer logout
                    await this.logout();
                }
            }

            return { success: true, authenticated: false };

        } catch (error) {
            console.error('‚ùå Erro ao verificar autentica√ß√£o:', error);
            return { success: false, error: error.message };
        }
    },

    // Verificar se usu√°rio est√° autenticado
    isAuthenticated() {
        return AppState.getState('isAuthenticated');
    },

    // Obter usu√°rio atual
    getCurrentUser() {
        return AppState.getState('user');
    },

    // Validar email
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    },

    // Validar senha (crit√©rios b√°sicos)
    isValidPassword(password) {
        return password && password.length >= 6;
    },

    // Gerar hash simples (n√£o usar em produ√ß√£o real)
    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash.toString();
    },

    // Middleware para verificar autentica√ß√£o
    requireAuth(callback) {
        if (this.isAuthenticated()) {
            callback();
        } else {
            console.warn('‚ö†Ô∏è A√ß√£o requer autentica√ß√£o');
            // Redirecionar para login
            if (window.NavigationManager) {
                NavigationManager.showSection('login-section');
            }
        }
    },

    // Renovar token (para implementa√ß√£o futura)
    async refreshToken() {
        try {
            if (!supabase || !supabase.isAuthenticated()) {
                return { success: false, error: 'N√£o autenticado' };
            }

            // Implementar renova√ß√£o de token se necess√°rio
            // Por enquanto, apenas verificar se o token ainda √© v√°lido
            return await this.checkStoredAuth();

        } catch (error) {
            console.error('‚ùå Erro ao renovar token:', error);
            return { success: false, error: error.message };
        }
    },

    // Listeners de mudan√ßa de autentica√ß√£o
    onAuthChange(callback) {
        AppState.addListener('isAuthenticated', callback);
    },

    // Remover listener de autentica√ß√£o
    offAuthChange(callback) {
        AppState.removeListener('isAuthenticated', callback);
    },

    // M√©todo para implementa√ß√£o futura: mudan√ßa de senha
    async changePassword(currentPassword, newPassword) {
        try {
            if (!this.isAuthenticated()) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            if (!this.isValidPassword(newPassword)) {
                throw new Error('Nova senha deve ter pelo menos 6 caracteres');
            }

            // Implementar mudan√ßa de senha com Supabase
            if (supabase) {
                // Implementa√ß√£o futura com Supabase Auth
                console.log('üöß Mudan√ßa de senha n√£o implementada ainda');
                return { success: false, error: 'Funcionalidade n√£o implementada' };
            }

            return { success: false, error: 'Supabase n√£o configurado' };

        } catch (error) {
            console.error('‚ùå Erro ao alterar senha:', error);
            return { success: false, error: error.message };
        }
    },

    // Reset de senha (implementa√ß√£o futura)
    async resetPassword(email) {
        try {
            if (!this.isValidEmail(email)) {
                throw new Error('Email inv√°lido');
            }

            if (supabase) {
                // Implementa√ß√£o futura com Supabase Auth
                console.log('üöß Reset de senha n√£o implementado ainda');
                return { success: false, error: 'Funcionalidade n√£o implementada' };
            }

            return { success: false, error: 'Supabase n√£o configurado' };

        } catch (error) {
            console.error('‚ùå Erro ao resetar senha:', error);
            return { success: false, error: error.message };
        }
    },

    // Verificar for√ßa da senha
    checkPasswordStrength(password) {
        const strength = {
            score: 0,
            feedback: []
        };

        if (!password) {
            strength.feedback.push('Senha √© obrigat√≥ria');
            return strength;
        }

        // Comprimento m√≠nimo
        if (password.length >= 6) {
            strength.score += 1;
        } else {
            strength.feedback.push('Senha deve ter pelo menos 6 caracteres');
        }

        // Cont√©m n√∫meros
        if (/\d/.test(password)) {
            strength.score += 1;
        } else {
            strength.feedback.push('Adicione n√∫meros para mais seguran√ßa');
        }

        // Cont√©m letras mai√∫sculas
        if (/[A-Z]/.test(password)) {
            strength.score += 1;
        } else {
            strength.feedback.push('Adicione letras mai√∫sculas');
        }

        // Cont√©m caracteres especiais
        if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
            strength.score += 1;
        } else {
            strength.feedback.push('Adicione caracteres especiais');
        }

        // Comprimento ideal
        if (password.length >= 12) {
            strength.score += 1;
        }

        return strength;
    },

    // Gerar senha aleat√≥ria
    generateRandomPassword(length = 12) {
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
        let password = '';
        
        for (let i = 0; i < length; i++) {
            password += charset.charAt(Math.floor(Math.random() * charset.length));
        }
        
        return password;
    },

    // Verificar se sess√£o expirou
    isSessionExpired() {
        if (!supabase || !supabase.isAuthenticated()) {
            return true;
        }

        // Implementar verifica√ß√£o de expira√ß√£o se necess√°rio
        // Por enquanto, assumir que n√£o expirou
        return false;
    },

    // Login com lembrar de mim
    async loginWithRemember(email, password, remember = false) {
        try {
            const result = await this.login(email, password);
            
            if (result.success && remember) {
                // Implementar "lembrar de mim" se necess√°rio
                try {
                    localStorage.setItem('blog-remember-user', email);
                } catch (error) {
                    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel salvar "lembrar de mim":', error);
                }
            }
            
            return result;
            
        } catch (error) {
            return { success: false, error: error.message };
        }
    },

    // Obter usu√°rio lembrado
    getRememberedUser() {
        try {
            return localStorage.getItem('blog-remember-user');
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao obter usu√°rio lembrado:', error);
            return null;
        }
    },

    // Limpar usu√°rio lembrado
    clearRememberedUser() {
        try {
            localStorage.removeItem('blog-remember-user');
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao limpar usu√°rio lembrado:', error);
        }
    },

    // Validar sess√£o periodicamente
    startSessionValidation(intervalMinutes = 30) {
        if (this.sessionValidationInterval) {
            clearInterval(this.sessionValidationInterval);
        }

        this.sessionValidationInterval = setInterval(async () => {
            if (this.isAuthenticated()) {
                const result = await this.checkStoredAuth();
                if (!result.authenticated) {
                    console.log('üîÑ Sess√£o inv√°lida, fazendo logout autom√°tico');
                    await this.logout();
                    
                    // Notificar usu√°rio
                    if (window.EventHandlers) {
                        EventHandlers.showMessage('login-message', 'Sess√£o expirada. Fa√ßa login novamente.', 'error');
                    }
                }
            }
        }, intervalMinutes * 60 * 1000);
    },

    // Parar valida√ß√£o de sess√£o
    stopSessionValidation() {
        if (this.sessionValidationInterval) {
            clearInterval(this.sessionValidationInterval);
            this.sessionValidationInterval = null;
        }
    },

    // Obter informa√ß√µes de debug sobre autentica√ß√£o
    getAuthInfo() {
        return {
            isAuthenticated: this.isAuthenticated(),
            user: this.getCurrentUser(),
            hasSupabase: !!supabase,
            hasStoredToken: supabase ? supabase.isAuthenticated() : false,
            rememberedUser: this.getRememberedUser(),
            sessionValidationActive: !!this.sessionValidationInterval
        };
    },

    // Limpar todos os dados de autentica√ß√£o
    clearAllAuthData() {
        try {
            // Limpar localStorage
            localStorage.removeItem('sb-auth-token');
            localStorage.removeItem('blog-remember-user');
            
            // Limpar estado
            AppState.setAuthenticated(false, null);
            
            // Parar valida√ß√£o de sess√£o
            this.stopSessionValidation();
            
            console.log('üßπ Dados de autentica√ß√£o limpos');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao limpar dados de autentica√ß√£o:', error);
        }
    },

    // Inicializar gerenciador de autentica√ß√£o
    init() {
        console.log('üîê Inicializando AuthManager...');
        
        // Verificar autentica√ß√£o armazenada
        this.checkStoredAuth();
        
        // Iniciar valida√ß√£o de sess√£o se autenticado
        if (this.isAuthenticated()) {
            this.startSessionValidation();
        }
        
        // Listener para mudan√ßas de autentica√ß√£o
        this.onAuthChange((isAuthenticated) => {
            if (isAuthenticated) {
                this.startSessionValidation();
            } else {
                this.stopSessionValidation();
            }
        });
    },

    // Destruir gerenciador (cleanup)
    destroy() {
        this.stopSessionValidation();
        this.clearAllAuthData();
        console.log('üîê AuthManager destru√≠do');
    }
};